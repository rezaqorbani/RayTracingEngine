Timer unit: 1e-06 s

Total time: 19.0335 s
File: raytracing.py
Function: normalize at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def normalize(x):
    10                                                   # This function normalizes a vector.
    11   3267360   18627146.6      5.7     97.9          x /= np.linalg.norm(x)
    12   3267360     406330.6      0.1      2.1          return x

Total time: 0 s
File: raytracing.py
Function: intersect_sphere at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def intersect_sphere(O, D, S, R):
    16                                                   # Return the distance from O to the intersection
    17                                                   # of the ray (O, D) with the sphere (S, R), or
    18                                                   # +inf if there is no intersection.
    19                                                   # O and S are 3D points, D (direction) is a
    20                                                   # normalized vector, R is a scalar.
    21                                                   a = np.dot(D, D)
    22                                                   OS = O - S
    23                                                   b = 2 * np.dot(D, OS)
    24                                                   c = np.dot(OS, OS) - R * R
    25                                                   disc = b * b - 4 * a * c
    26                                                   if disc > 0:
    27                                                       distSqrt = np.sqrt(disc)
    28                                                       q = (-b - distSqrt) / 2.0 if b < 0 \
    29                                                           else (-b + distSqrt) / 2.0
    30                                                       t0 = q / a
    31                                                       t1 = c / q
    32                                                       t0, t1 = min(t0, t1), max(t0, t1)
    33                                                       if t1 >= 0:
    34                                                           return t1 if t0 < 0 else t0
    35                                                   return np.inf

Total time: 26.1253 s
File: raytracing.py
Function: trace_ray at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def trace_ray(O, D):
    39                                                   # Find first point of intersection with the scene.
    40   1600000    8006238.4      5.0     30.6          t = rt.intersect_sphere(O, D, position, radius)
    41                                                   # No intersection?
    42   1183160     295832.4      0.3      1.1          if t == np.inf:
    43   1183160     147839.8      0.1      0.6              return
    44                                                   # Find the point of intersection on the object.
    45    416840     611800.0      1.5      2.3          M = O + D * t
    46    416840    3524518.5      8.5     13.5          N = normalize(M - position)
    47    416840    3377187.2      8.1     12.9          toL = normalize(L - M)
    48    416840    3351665.0      8.0     12.8          toO = normalize(O - M)
    49                                                   # Ambient light.
    50    416840      50614.3      0.1      0.2          col = ambient
    51                                                   # Lambert shading (diffuse).
    52    416840    1640198.4      3.9      6.3          col += diffuse * max(np.dot(N, toL), 0) * color
    53                                                   # Blinn-Phong shading (specular).
    54    416840     825702.2      2.0      3.2          col += specular_c * color_light * \
    55    416840    4179816.1     10.0     16.0              (max(np.dot(N, normalize(toL + toO)), 0)) \
    56    416840      59270.3      0.1      0.2              ** specular_k
    57    416840      54607.4      0.1      0.2          return col

Total time: 52.8485 s
File: raytracing.py
Function: run at line 59

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    59                                           @profile
    60                                           def run():
    61        10      12680.4   1268.0      0.0          img = np.zeros((h, w, 3))
    62                                                   # Loop through all pixels.
    63      4000       2952.9      0.7      0.0          for i, x in enumerate(np.linspace(-1, 1, w)):
    64   1600000     671586.9      0.4      1.3              for j, y in enumerate(np.linspace(-1, 1, h)):
    65                                                           # Position of the pixel.
    66   1600000     590556.8      0.4      1.1                  Q[0], Q[1] = x, y
    67                                                           # Direction of the ray going through
    68                                                           # the optical center.
    69   1600000   13772639.4      8.6     26.1                  D = normalize(Q - O)
    70                                                           # Launch the ray and get the color
    71                                                           # of the pixel.
    72   1600000   31045109.3     19.4     58.7                  col = trace_ray(O, D)
    73   1183160     159080.7      0.1      0.3                  if col is None:
    74   1183160     179781.4      0.2      0.3                      continue
    75    416840    6414133.8     15.4     12.1                  img[h - j - 1, i, :] = np.clip(col, 0, 1)
    76        10          1.4      0.1      0.0          return img

