Filename: raytracing.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     5   64.973 MiB 21125785.562 MiB      326736   @profile
     6                                         def normalize(x):
     7                                                 # This function normalizes a vector.
     8   64.973 MiB    0.000 MiB      326736           x /= np.linalg.norm(x)
     9   64.973 MiB    0.000 MiB      326736           return x


Filename: raytracing.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    11   64.973 MiB 10307277.750 MiB      160000   @profile
    12                                         def intersect_sphere(O, D, S, R):
    13                                                 # Return the distance from O to the intersection
    14                                                 # of the ray (O, D) with the sphere (S, R), or
    15                                                 # +inf if there is no intersection.
    16                                                 # O and S are 3D points, D (direction) is a
    17                                                 # normalized vector, R is a scalar.
    18   64.973 MiB    0.000 MiB      160000           a = np.dot(D, D)
    19   64.973 MiB    0.000 MiB      160000           OS = O - S
    20   64.973 MiB    0.000 MiB      160000           b = 2 * np.dot(D, OS)
    21   64.973 MiB    0.000 MiB      160000           c = np.dot(OS, OS) - R * R
    22   64.973 MiB    0.000 MiB      160000           disc = b * b - 4 * a * c
    23   64.973 MiB    0.000 MiB      160000           if disc > 0:
    24   64.973 MiB    0.000 MiB       41684               distSqrt = np.sqrt(disc)
    25   64.973 MiB    0.000 MiB       41684               q = (-b - distSqrt) / 2.0 if b < 0 \
    26                                                         else (-b + distSqrt) / 2.0
    27   64.973 MiB    0.000 MiB       41684               t0 = q / a
    28   64.973 MiB    0.000 MiB       41684               t1 = c / q
    29   64.973 MiB    0.000 MiB       41684               t0, t1 = min(t0, t1), max(t0, t1)
    30   64.973 MiB    0.000 MiB       41684               if t1 >= 0:
    31   64.973 MiB    0.000 MiB       41684                   return t1 if t0 < 0 else t0
    32   64.973 MiB    0.000 MiB      118316           return np.inf


Filename: raytracing.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    34   64.973 MiB 10307277.750 MiB      160000   @profile
    35                                         def trace_ray(O, D):
    36                                                 # Find first point of intersection with the scene.
    37   64.973 MiB 10307277.750 MiB      160000           t = intersect_sphere(O, D, position, radius)
    38                                                 # No intersection?
    39   64.973 MiB    0.000 MiB      160000           if t == np.inf:
    40   64.973 MiB    0.000 MiB      118316               return
    41                                                 # Find the point of intersection on the object.
    42   64.973 MiB    0.000 MiB       41684           M = O + D * t
    43   64.973 MiB 2704626.953 MiB       41684           N = normalize(M - position)
    44   64.973 MiB 2704626.953 MiB       41684           toL = normalize(L - M)
    45   64.973 MiB 2704626.953 MiB       41684           toO = normalize(O - M)
    46                                                 # Ambient light.
    47   64.973 MiB    0.000 MiB       41684           col = ambient
    48                                                 # Lambert shading (diffuse).
    49   64.973 MiB    0.000 MiB       41684           col += diffuse * max(np.dot(N, toL), 0) * color
    50                                                 # Blinn-Phong shading (specular).
    51   64.973 MiB    0.000 MiB       83368           col += specular_c * color_light * \
    52   64.973 MiB 2704626.953 MiB       83368               max(np.dot(N, normalize(toL + toO)), 0) \
    53   64.973 MiB    0.000 MiB       41684               ** specular_k
    54   64.973 MiB    0.000 MiB       41684           return col


Filename: raytracing.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    56   62.660 MiB   62.660 MiB           1   @profile 
    57                                         def run():
    58   62.660 MiB    0.000 MiB           1           img = np.zeros((h, w, 3))
    59                                                 # Loop through all pixels.
    60   64.973 MiB    0.000 MiB         401           for i, x in enumerate(np.linspace(-1, 1, w)):
    61   64.973 MiB    0.000 MiB      160400               for j, y in enumerate(np.linspace(-1, 1, h)):
    62                                                         # Position of the pixel.
    63   64.973 MiB    0.000 MiB      160000                   Q[0], Q[1] = x, y
    64                                                         # Direction of the ray going through
    65                                                         # the optical center.
    66   64.973 MiB 10307277.750 MiB      160000                   D = normalize(Q - O)
    67                                                         # Launch the ray and get the color
    68                                                         # of the pixel.
    69   64.973 MiB 10307277.750 MiB      160000                   col = trace_ray(O, D)
    70   64.973 MiB    0.000 MiB      160000                   if col is None:
    71   64.973 MiB    0.000 MiB      118316                       continue
    72   64.973 MiB    2.312 MiB       41684                   img[h - j - 1, i, :] = np.clip(col, 0, 1)
    73   64.973 MiB    0.000 MiB           1           return img


